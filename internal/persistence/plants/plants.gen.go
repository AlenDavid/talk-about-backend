// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package plants

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/alendavid/talk-about-backend/pkg/plants"
)

func newPlant(db *gorm.DB, opts ...gen.DOOption) plant {
	_plant := plant{}

	_plant.plantDo.UseDB(db, opts...)
	_plant.plantDo.UseModel(&plants.Plant{})

	tableName := _plant.plantDo.TableName()
	_plant.ALL = field.NewAsterisk(tableName)
	_plant.ID = field.NewUint(tableName, "id")
	_plant.Name = field.NewString(tableName, "name")
	_plant.Active = field.NewBool(tableName, "active")
	_plant.Description = field.NewString(tableName, "description")
	_plant.CreatedAt = field.NewTime(tableName, "created_at")
	_plant.UpdatedAt = field.NewTime(tableName, "updated_at")
	_plant.DeletedAt = field.NewTime(tableName, "deleted_at")

	_plant.fillFieldMap()

	return _plant
}

type plant struct {
	plantDo plantDo

	ALL         field.Asterisk
	ID          field.Uint
	Name        field.String
	Active      field.Bool
	Description field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Time

	fieldMap map[string]field.Expr
}

func (p plant) Table(newTableName string) *plant {
	p.plantDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p plant) As(alias string) *plant {
	p.plantDo.DO = *(p.plantDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *plant) updateTableName(table string) *plant {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.Name = field.NewString(table, "name")
	p.Active = field.NewBool(table, "active")
	p.Description = field.NewString(table, "description")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewTime(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *plant) WithContext(ctx context.Context) IPlantDo { return p.plantDo.WithContext(ctx) }

func (p plant) TableName() string { return p.plantDo.TableName() }

func (p plant) Alias() string { return p.plantDo.Alias() }

func (p plant) Columns(cols ...field.Expr) gen.Columns { return p.plantDo.Columns(cols...) }

func (p *plant) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *plant) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["active"] = p.Active
	p.fieldMap["description"] = p.Description
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p plant) clone(db *gorm.DB) plant {
	p.plantDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p plant) replaceDB(db *gorm.DB) plant {
	p.plantDo.ReplaceDB(db)
	return p
}

type plantDo struct{ gen.DO }

type IPlantDo interface {
	gen.SubQuery
	Debug() IPlantDo
	WithContext(ctx context.Context) IPlantDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPlantDo
	WriteDB() IPlantDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPlantDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPlantDo
	Not(conds ...gen.Condition) IPlantDo
	Or(conds ...gen.Condition) IPlantDo
	Select(conds ...field.Expr) IPlantDo
	Where(conds ...gen.Condition) IPlantDo
	Order(conds ...field.Expr) IPlantDo
	Distinct(cols ...field.Expr) IPlantDo
	Omit(cols ...field.Expr) IPlantDo
	Join(table schema.Tabler, on ...field.Expr) IPlantDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPlantDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPlantDo
	Group(cols ...field.Expr) IPlantDo
	Having(conds ...gen.Condition) IPlantDo
	Limit(limit int) IPlantDo
	Offset(offset int) IPlantDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPlantDo
	Unscoped() IPlantDo
	Create(values ...*plants.Plant) error
	CreateInBatches(values []*plants.Plant, batchSize int) error
	Save(values ...*plants.Plant) error
	First() (*plants.Plant, error)
	Take() (*plants.Plant, error)
	Last() (*plants.Plant, error)
	Find() ([]*plants.Plant, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*plants.Plant, err error)
	FindInBatches(result *[]*plants.Plant, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*plants.Plant) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPlantDo
	Assign(attrs ...field.AssignExpr) IPlantDo
	Joins(fields ...field.RelationField) IPlantDo
	Preload(fields ...field.RelationField) IPlantDo
	FirstOrInit() (*plants.Plant, error)
	FirstOrCreate() (*plants.Plant, error)
	FindByPage(offset int, limit int) (result []*plants.Plant, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPlantDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p plantDo) Debug() IPlantDo {
	return p.withDO(p.DO.Debug())
}

func (p plantDo) WithContext(ctx context.Context) IPlantDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p plantDo) ReadDB() IPlantDo {
	return p.Clauses(dbresolver.Read)
}

func (p plantDo) WriteDB() IPlantDo {
	return p.Clauses(dbresolver.Write)
}

func (p plantDo) Session(config *gorm.Session) IPlantDo {
	return p.withDO(p.DO.Session(config))
}

func (p plantDo) Clauses(conds ...clause.Expression) IPlantDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p plantDo) Returning(value interface{}, columns ...string) IPlantDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p plantDo) Not(conds ...gen.Condition) IPlantDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p plantDo) Or(conds ...gen.Condition) IPlantDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p plantDo) Select(conds ...field.Expr) IPlantDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p plantDo) Where(conds ...gen.Condition) IPlantDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p plantDo) Order(conds ...field.Expr) IPlantDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p plantDo) Distinct(cols ...field.Expr) IPlantDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p plantDo) Omit(cols ...field.Expr) IPlantDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p plantDo) Join(table schema.Tabler, on ...field.Expr) IPlantDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p plantDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPlantDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p plantDo) RightJoin(table schema.Tabler, on ...field.Expr) IPlantDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p plantDo) Group(cols ...field.Expr) IPlantDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p plantDo) Having(conds ...gen.Condition) IPlantDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p plantDo) Limit(limit int) IPlantDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p plantDo) Offset(offset int) IPlantDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p plantDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPlantDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p plantDo) Unscoped() IPlantDo {
	return p.withDO(p.DO.Unscoped())
}

func (p plantDo) Create(values ...*plants.Plant) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p plantDo) CreateInBatches(values []*plants.Plant, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p plantDo) Save(values ...*plants.Plant) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p plantDo) First() (*plants.Plant, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*plants.Plant), nil
	}
}

func (p plantDo) Take() (*plants.Plant, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*plants.Plant), nil
	}
}

func (p plantDo) Last() (*plants.Plant, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*plants.Plant), nil
	}
}

func (p plantDo) Find() ([]*plants.Plant, error) {
	result, err := p.DO.Find()
	return result.([]*plants.Plant), err
}

func (p plantDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*plants.Plant, err error) {
	buf := make([]*plants.Plant, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p plantDo) FindInBatches(result *[]*plants.Plant, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p plantDo) Attrs(attrs ...field.AssignExpr) IPlantDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p plantDo) Assign(attrs ...field.AssignExpr) IPlantDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p plantDo) Joins(fields ...field.RelationField) IPlantDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p plantDo) Preload(fields ...field.RelationField) IPlantDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p plantDo) FirstOrInit() (*plants.Plant, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*plants.Plant), nil
	}
}

func (p plantDo) FirstOrCreate() (*plants.Plant, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*plants.Plant), nil
	}
}

func (p plantDo) FindByPage(offset int, limit int) (result []*plants.Plant, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p plantDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p plantDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p plantDo) Delete(models ...*plants.Plant) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *plantDo) withDO(do gen.Dao) *plantDo {
	p.DO = *do.(*gen.DO)
	return p
}
